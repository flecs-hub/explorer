// Script that creates a city
//
// For C/C++ examples and docs go to:
//  https://github.com/SanderMertens/flecs

using flecs.script.*
using flecs.components.*

const rng = Rng: {} // Random number generator

template Tree {  
  const trunkY = 0.3
  const canopyY = 1 - trunkY

  {
    Position3: {0, trunkY / 2, 0}
    Rgb: {0.08, 0.03, 0.0}
    Box: {0.1, trunkY, 0.1}
  } {
    Position3: {0, trunkY + canopyY / 2, 0}
    Rgb: {0.1, 0.2, 0.06}
    Box: {0.25, canopyY, 0.25}
  }
}

template Pavement {
  prop width: 5.0

  Box: {width, 0.1, width}
  Rgb: {0.2, 0.2, 0.2}
  
  const trees = 3
  const spacing = width / trees
  const offset = (width/2) - 0.2

  for i in 0..trees {
    const x = (i + 0.5) * spacing - width / 2
    Tree() {Position3: {-offset, 0, x}}
    Tree() {Position3: {offset, 0, x}}
    Tree() {Position3: {x, 0, -offset}}
    Tree() {Position3: {x, 0, offset}}
  }
}

template Building {
  prop width: 4
  prop floors: 8
  prop windows: 3
  prop windowSpacing: 0.2
  prop floorThickness: 0.3
  prop color = Rgb: {0.3, 0.3, 0.3}

  // Single blue box for the windows
  {
    Position3: {0, floors / 2, 0}
    Box: {width - 0.2, floors, width - 0.2}
    Rgb: {0.01, 0.02, 0.05}
    Specular: {0.2, 1.5}
  }

  const pillars = windows + 2
  const wallW: width - windowSpacing
  const wallWH: wallW / 2
  const spacing: wallW / (pillars - 1)

  with $color {
    // Floors
    for i in 0..floors {{
      Position3: {0, y: i + 1, 0}
      Box: {width, floorThickness, width}
    }}

    // Separation between windows
    for p in 1..(pillars - 1) {{
      Position3: {
        p * spacing - wallWH, floors / 2
      }
      Box: {windowSpacing, floors, width}
    }{
      Position3: {
        0, floors / 2, p * spacing - wallWH
      }
      Box: {width, floors, windowSpacing}
    }}

    // Create boxes on the corners
    with Box(windowSpacing, floors, windowSpacing) {
     {Position3: {-wallWH, floors / 2, -wallWH}}
     {Position3: {-wallWH, floors / 2, wallWH}} 
     {Position3: {wallWH, floors / 2, wallWH}} 
     {Position3: {wallWH, floors / 2, -wallWH}}
    }
  }
}

// City template
template City {
  prop gridSize: 7
  prop blockWidth: 7.5
  prop pavementWidth: 6
  prop buildingWidth: 4
  prop maxFloors: 14
  prop varFloors: 4

  const gridSizeH = gridSize / 2

  // Street plane
  {
    Position3: {0, 0.1 / 2, 0}
    Box: {
      blockWidth * gridSize, 0.1, 
      blockWidth * gridSize
    }
    Rgb: {0.08, 0.08, 0.08}
  }

  // The city grid
  for x in 0 .. gridSize {
    for y in 0 .. gridSize {
      const xR: x - gridSizeH
      const yR: y - gridSizeH
      const xS: 1.0 - (abs(xR + 0.5) / gridSizeH)
      const yS: 1.0 - (abs(yR + 0.5) / gridSizeH)
      const baseY: pow(xS, 2) * pow(yS, 2) * maxFloors
      const xP: xR * blockWidth + blockWidth / 2
      const yP: yR * blockWidth + blockWidth / 2
      const rgb: rng.f(0.5) + 0.05

      // Pavement
      Pavement(pavementWidth) {
        Position3: {xP, 0.1, yP} 
      }
  
      // Building
      Building(
        width: buildingWidth
        floors: baseY + rng.u(varFloors) + 1
        windows: rng.u(5) + 2
        floorThickness: rng.f(0.1) + 0.2
        windowSpacing: rng.f(0.2) + 0.1
        color: {rgb + rng.f(0.15), rgb, rgb}
      ) {
        Position3: {xP, 0.1, yP} 
      }
    }
  }
}

// Create the city with default values
City city()
